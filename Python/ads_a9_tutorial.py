# -*- coding: utf-8 -*-
"""ADS_A9_Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tHYQtgE59TiAUM6mW9ULUc63M2Pc97LA

# IU Applied Data Science (INFO_I-590)
### Instructor: Joanne Luciano ; TAs: Jeremy Yang and Kaicheng Yang
# Assignment 9 Tutorial: Python, pandas, matplotlib and Scikit-Learn; algorithms: Na√Øve Bayes and Neural Networks
"""

import sys,os,re
import urllib.request
import pandas
import numpy
import sklearn
import sklearn.model_selection
import sklearn.metrics
import sklearn.naive_bayes
import sklearn.neural_network
import matplotlib.pyplot

"""### Convenience function for model performance evaluation:"""

def print_score(Ytrue,Ypred):
  print("precision: %.2f ; recall: %.2f ; F1: %.2f"%(
        sklearn.metrics.precision_score(Ytrue,Ypred),
        sklearn.metrics.recall_score(Ytrue,Ypred),
        sklearn.metrics.f1_score(Ytrue,Ypred)), file=sys.stderr)

"""### *UC Irvine ML Archive dataset: Pima Indians & Diabetes*
### Read from URL into pandas DataFrame:
"""

fin = urllib.request.urlopen("http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data")

pima_df = pandas.read_csv(fin, header=None,
        names = [
        "number_of_times_pregnant",
        "plasma_glucose_concentration",
        "diastolic_blood_pressure",
        "triceps_skin_fold_thickness",
        "serum_insulin",
        "body_mass_index",
        "diabetes_pedigree",
        "age",
        "class"])

fin.close()
nrows,ncols = pima_df.shape
print("dataset ncols: %d ; nrows: %d:"%(ncols,nrows), file=sys.stderr)
print(pima_df.head(), file=sys.stderr)

"""### Histogram of BMI"""

n, bins, patches = matplotlib.pyplot.hist(pima_df["body_mass_index"], 50, facecolor='#8888FF', alpha=0.75)

matplotlib.pyplot.xlabel('BMI')
matplotlib.pyplot.title('Histogram of BMI')
matplotlib.pyplot.grid(True)
matplotlib.pyplot.show()

"""### Read metadata"""

fin = urllib.request.urlopen("http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.names")
pima_metadata = fin.read().decode('utf8')
fin.close()
pima_metadata.splitlines()

"""### Separate input variables and class labels into X & Y arrays."""

Y = pima_df['class'].as_matrix() 
X = pima_df.iloc[:,0:ncols-1].as_matrix()

"""### Create train/test split for modeling"""

Xtrain,Xtest,Ytrain,Ytest = sklearn.model_selection.train_test_split(X, Y, test_size=.25)
print("training set: %s ; test set: %s"%(Xtrain.shape, Xtest.shape), file=sys.stderr)

"""### Naive Bayes"""

nb = sklearn.naive_bayes.GaussianNB() 
nb.fit(Xtrain,Ytrain)
Y_pred = nb.predict(Xtest)
tn, fp, fn, tp = sklearn.metrics.confusion_matrix(Ytest, Y_pred).ravel()
print("TP: %d ; TN: %d ; FP: %d ; FN: %d"%(tp, tn, fp, fn))
print_score(Ytest,Y_pred)

"""### Neural Network"""

nn = sklearn.neural_network.MLPClassifier() 
nn.fit(Xtrain,Ytrain)
y_pred = nn.predict(Xtest)
tn, fp, fn, tp = sklearn.metrics.confusion_matrix(Ytest, Y_pred).ravel()
print("TP: %d ; TN: %d ; FP: %d ; FN: %d"%(tp, tn, fp, fn))
print_score(Ytest,Y_pred)